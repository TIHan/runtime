// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;

//namespace CodeGenTests
//{
//    static class IntSubtract
//    {
//        static void Test(uint i, ref uint refDestination)
//        {
//            i = i * sizeof(uint) + 3;
//            refDestination = i;
//        }

//        static void Test2(uint i, ref uint refDestination)
//        {
//            refDestination = i * sizeof(uint) + 3;
//        }

//        [MethodImpl(MethodImplOptions.NoInlining)] static byte Cast(uint i) => (byte)(i);
//        [MethodImpl(MethodImplOptions.NoInlining)] static byte And(uint i) => (byte)(i & 0xFF);

//        [MethodImpl(MethodImplOptions.NoInlining)] static byte And2(byte i) => (byte)(i & 0xFF);

//        [MethodImpl(MethodImplOptions.NoInlining)] static byte Mod(uint i) => (byte)(i % 256);

//        [MethodImpl(MethodImplOptions.NoInlining)] static ushort Mod2(uint i) => (ushort)(i % 65536);

//        [MethodImpl(MethodImplOptions.NoInlining)] static ushort Mod5(uint i) => (ushort)(i % 65536);

//        [MethodImpl(MethodImplOptions.NoInlining)] static ushort Mod10(ushort i) => (ushort)(i % 0xFFFF);

//        [MethodImpl(MethodImplOptions.NoInlining)] static uint Mod3(uint i) => (i % (long)4294967296);

//        [MethodImpl(MethodImplOptions.NoInlining)] static ulong Mod4(ulong i) => (i % ulong.MinValue);

//        // Internet Checksum as defined by RFC 791, RFC 793, RFC 1071, RFC 1141, RFC 1624
//        public static ushort Calcuate(ref byte buffer, int length)
//        {
//            ref var current = ref buffer;
//            ulong sum = 0;

//            while (length >= sizeof(ulong))
//            {
//                length -= sizeof(ulong);

//                var ulong0 = Unsafe.As<byte, ulong>(ref current);
//                current = ref Unsafe.Add(ref current, sizeof(ulong));

//                // Add with carry
//                sum += ulong0;
//                if (sum < ulong0)
//                {
//                    sum++;
//                }
//            }

//            if ((length & sizeof(uint)) != 0)
//            {
//                var uint0 = Unsafe.As<byte, uint>(ref current);
//                current = ref Unsafe.Add(ref current, sizeof(uint));

//                // Add with carry
//                sum += uint0;
//                if (sum < uint0)
//                {
//                    sum++;
//                }
//            }

//            if ((length & sizeof(ushort)) != 0)
//            {
//                var ushort0 = Unsafe.As<byte, ushort>(ref current);
//                current = ref Unsafe.Add(ref current, sizeof(ushort));

//                // Add with carry
//                sum += ushort0;
//                if (sum < ushort0)
//                {
//                    sum++;
//                }
//            }

//            if ((length & sizeof(byte)) != 0)
//            {
//                var byte0 = current;

//                // Add with carry
//                sum += byte0;
//                if (sum < byte0)
//                {
//                    sum++;
//                }
//            }

//            // Fold down to 16 bits

//            var uint1 = (uint)(sum >> 32);
//            var uint2 = (uint)sum;

//            // Add with carry
//            uint1 += uint2;
//            if (uint1 < uint2)
//            {
//                uint1++;
//            }

//            var ushort2 = (ushort)uint1;
//            var ushort1 = (ushort)(uint1 >> 16);

//            // Add with carry
//            ushort1 = (ushort)(ushort1 + ushort2);
//            if (ushort1 < ushort2)
//            {
//                ushort1++;
//            }

//            // Invert to get ones-complement result 
//            return (ushort)~ushort1;
//        }

//        public static ushort Calcuate2(uint uint1)
//        {
//            var ushort2 = (ushort)uint1;
//            var ushort1 = (ushort)(uint1 >> 16);

//            ushort1 = (ushort)(ushort1 + ushort2);
//            if (ushort1 < ushort2)
//            {
//                ushort1++;
//                ushort1 = (ushort)~ushort1;
//            }

//            return (ushort)~ushort1;
//        }

//        static int Main()
//        {
//            return 100;
//        }
//    }
//}





//// Generated by Fuzzlyn v1.5 on 2022-12-07 02:44:13
//// Run on X64 Windows
//// Seed: 11196128031848500848
//// Reduced from 27.9 KiB to 0.3 KiB in 00:00:14
//// Debug: Prints 1 line(s)
//// Release: Prints 0 line(s)
//public class Program
//{
//    public static sbyte s_2 = -1;
//    public static ulong[,] s_8 = new ulong[,] { { 0 } };
//    public static void Main()
//    {
//        bool vr3 = s_2 != (uint)s_2;
//        if (vr3)
//        {
//            ulong vr4 = s_8[0, 0];
//            System.Console.WriteLine(vr4);
//        }
//    }
//}





//// Generated by Fuzzlyn v1.5 on 2022-12-07 08:47:59
//// Run on X64 Windows
//// Seed: 1272252829353802535
//// Reduced from 283.8 KiB to 1.5 KiB in 00:01:42
//// Debug: Outputs 4294967295
//// Release: Outputs 18446744073709551615
//public interface I2
//{
//}

//public class C0
//{
//    public long F1;
//    public ulong F3;
//    public ulong F5;
//    public C0(long f1)
//    {
//        F1 = f1;
//    }
//}

//public class C1
//{
//    public C0 F1;
//    public short F5;
//    public C0 F6;
//    public C1(C0 f1, short f5, C0 f6)
//    {
//        F1 = f1;
//        F5 = f5;
//        F6 = f6;
//    }
//}

//public class C2 : I2
//{
//}

//public class Program
//{
//    public static IRuntime s_rt;
//    public static I2[][] s_8 = new I2[][] { new I2[] { new C2() } };
//    public static C1 s_11 = new C1(new C0(-1), 0, new C0(0));
//    public static C1[] s_19 = new C1[] { new C1(new C0(0), 1, new C0(0)) };
//    public static C1[][] s_28 = new C1[][] { new C1[] { new C1(new C0(0), 0, new C0(0)) } };
//    public static void Main()
//    {
//        s_rt = new Runtime();
//        byte vr6 = default(byte);
//        var vr4 = s_8[0][0];
//        bool vr5 = M2(vr6, vr4);
//    }

//    public static bool M2(uint arg0, I2 arg1)
//    {
//        try
//        {
//        }
//        finally
//        {
//            arg1 = arg1;
//        }

//        arg0 = (uint)s_11.F1.F1--;
//        ulong var11 = arg0 * (ulong)M38();
//        short vr8 = s_19[0].F5;
//        arg0 = (uint)vr8;
//        s_rt.WriteLine(var11);
//        return false;
//    }

//    public static short M38()
//    {
//        s_11.F6.F3 = s_28[0][0].F6.F5;
//        return s_19[0].F5;
//    }
//}

//public interface IRuntime
//{
//    void WriteLine<T>(T value);
//}

//public class Runtime : IRuntime
//{
//    public void WriteLine<T>(T value) => System.Console.WriteLine(value);
//}








//// Generated by Fuzzlyn v1.5 on 2022-12-08 01:25:03
//// Run on X64 Windows
//// Seed: 17366111010099387998
//// Reduced from 231.7 KiB to 0.7 KiB in 00:02:43
//// Debug: Outputs -25663456399
//// Release: Outputs -5
//public class Program
//{
//    public static IRuntime s_rt;
//    public static int s_10;
//    public static long s_12 = -9223372036854775807L;
//    public static short s_14 = 1;
//    public static int s_15;
//    public static void Main()
//    {
//        s_rt = new Runtime();
//        var vr12 = M23();
//    }

//    public static int M23()
//    {
//        long var0 = s_12;
//        var0 /= ((uint)(1667439062105716469UL << s_10) / s_14);
//        s_rt.WriteLine(var0);
//        return s_15;
//    }
//}

//public interface IRuntime
//{
//    void WriteLine<T>(T value);
//}

//public class Runtime : IRuntime
//{
//    public void WriteLine<T>(T value) => System.Console.WriteLine(value);
//}





//// Generated by Fuzzlyn v1.5 on 2022-12-08 01:28:42
//// Run on X64 Windows
//// Seed: 5356498131893006092
//// Reduced from 352.7 KiB to 0.4 KiB in 00:02:06
//// Debug: Outputs 3
//// Release: Outputs -1
//public class C0
//{
//    public long F1;
//    public sbyte F2;
//    public long F4;
//    public C0(sbyte f2)
//    {
//        F2 = f2;
//    }
//}

//public class Program
//{
//    public static void Main()
//    {
//        C0 vr8 = new C0(126);
//        vr8.F4 = vr8.F1--;
//        var vr12 = (uint)(1 / vr8.F1) % vr8.F2;
//        System.Console.WriteLine(vr12);
//    }
//}




//// Generated by Fuzzlyn v1.5 on 2022-12-08 20:21:56
//// Run on X64 Windows
//// Seed: 15221172188038855181
//// Reduced from 191.0 KiB to 0.5 KiB in 00:01:01
//// Debug: Outputs 0
//// Release: Outputs 1
//public class Program
//{
//    public static byte[][] s_7;
//    public static byte s_31 = 1;
//    public static short[] s_35 = new short[] { -1 };
//    public static int s_62;
//    public static uint s_67 = 1;
//    public static byte s_78;
//    public static void Main()
//    {
//        M70(ref s_7);
//        System.Console.WriteLine(s_31);
//    }

//    public static void M70(ref byte[][] arg0)
//    {
//        arg0 = ref s_7;
//        if (((uint)(s_67 / s_35[0]) > s_62))
//        {
//            s_31 = s_78;
//        }
//    }
//}


//// Generated by Fuzzlyn v1.5 on 2022-12-08 23:03:19
//// Run on X64 Windows
//// Seed: 6619915909132675407
//// Reduced from 293.0 KiB to 0.3 KiB in 00:02:43
//// Debug: Outputs 4294967295
//// Release: Outputs 18446744073709551615
//public class Program
//{
//    public static short s_30;
//    public static ulong s_43;
//    public static void Main()
//    {
//        for (int vr3 = 0; vr3 < 2; vr3++)
//        {
//            s_43 = (uint)s_30;
//            s_30 = -1;
//        }

//        System.Console.WriteLine(s_43);
//    }
//}



//// Generated by Fuzzlyn v1.5 on 2022-12-08 23:47:45
//// Run on X64 Windows
//// Seed: 15383604370668508587
//// Reduced from 60.5 KiB to 0.3 KiB in 00:00:44
//// Debug: Outputs 4294967295
//// Release: Outputs 18446744073709551615
//public class Program
//{
//    public static int s_5 = 1;
//    public static byte s_11 = 1;
//    public static short s_21;
//    public static void Main()
//    {
//        ulong vr0 = (ulong)((uint)((uint)s_5 / ~s_21) / (long)s_11);
//        System.Console.WriteLine(vr0);
//    }
//}









//// Generated by Fuzzlyn v1.5 on 2022-12-09 03:38:25
//// Run on X64 Windows
//// Seed: 12219215260218463683
//// Reduced from 221.6 KiB to 0.4 KiB in 00:01:49
//// Debug: Outputs False
//// Release: Outputs True
//public class C0
//{
//    public long F4;
//    public bool F6;
//    public uint F8;
//    public C0(long f4, bool f6)
//    {
//        F4 = f4;
//        F6 = f6;
//    }
//}

//public class Program
//{
//    public static C0 s_33;
//    public static void Main()
//    {
//        var vr8 = new C0(-5087391072720663562L, true);
//        s_33 = vr8;
//        s_33.F6 &= s_33.F8-- < s_33.F4;
//        System.Console.WriteLine(s_33.F6);
//    }
//}





//// Generated by Fuzzlyn v1.5 on 2022-12-09 03:51:25
//// Run on X64 Windows
//// Seed: 4702602753001164875
//// Reduced from 271.0 KiB to 0.6 KiB in 00:01:53
//// Debug: Prints 2 line(s)
//// Release: Prints 1 line(s)
//public class Program
//{
//    public static IRuntime s_rt;
//    public static short[] s_67 = new short[] { -1 };
//    public static void Main()
//    {
//        s_rt = new Runtime();
//        var vr1 = s_67[0]++;
//        uint vr3 = (uint)(-M98());
//        if (s_67[0] <= vr3)
//        {
//            s_rt.WriteLine(0);
//        }
//    }

//    public static int M98()
//    {
//        s_rt.WriteLine(0);
//        return 1;
//    }
//}

//public interface IRuntime
//{
//    void WriteLine<T>(T value);
//}

//public class Runtime : IRuntime
//{
//    public void WriteLine<T>(T value) => System.Console.WriteLine(value);
//}




//// Generated by Fuzzlyn v1.5 on 2022-12-09 19:28:27
//// Run on X64 Windows
//// Seed: 5024333017986727354
//// Reduced from 92.6 KiB to 1.7 KiB in 00:00:50
//// Debug: Outputs 0
//// Release: Outputs 18446744069414584320
//public class Program
//{
//    public static IRuntime s_rt;
//    public static byte s_1;
//    public static ulong s_2;
//    public static ulong[][,][][][] s_4 = new ulong[][,][][][] { new ulong[,][][][] { { new ulong[][][] { new ulong[][] { new ulong[] { 0 } } } } } };
//    public static sbyte s_5;
//    public static bool s_12;
//    public static bool[] s_13 = new bool[] { false };
//    public static short s_15;
//    public static void Main()
//    {
//        s_rt = new Runtime();
//        sbyte vr10 = M24();
//    }

//    public static sbyte M24()
//    {
//        var vr2 = M26();
//        var vr4 = M25(false, 158, s_2, ref s_15, ref s_12, M25(false, M25(s_12, s_1, 0, ref s_15, ref s_13[0], s_2), s_2, ref s_15, ref s_12, s_2));
//        var vr3 = M25(false, vr4, s_2--, ref s_15, ref s_13[0], M25(true, M25(true, s_1, 0, ref s_15, ref s_12, s_4[0][0, 0][0][0][0]), 3395903276045530042UL, ref s_15, ref s_13[0], s_2));
//        M25(vr2, vr3, 0, ref s_15, ref s_13[0], 0);
//        return s_5;
//    }

//    public static byte M25(bool arg0, byte arg1, ulong arg2, ref short arg3, ref bool arg4, ulong arg5)
//    {
//        for (int var0 = 0; var0 < 0; var0++)
//        {
//            s_rt.WriteLine("c_73", var0);
//        }

//        s_rt.WriteLine("c_74", arg0);
//        s_rt.WriteLine("c_75", arg1);
//        s_rt.WriteLine("c_76", arg2);
//        s_rt.WriteLine("c_77", arg3);
//        s_rt.WriteLine("c_78", arg4);
//        s_rt.WriteLine("c_79", arg5);
//        return 0;
//    }

//    public static ref bool M26()
//    {
//        return ref s_13[0];
//    }
//}

//public interface IRuntime
//{
//    void WriteLine<T>(string site, T value);
//}

//public class Runtime : IRuntime
//{
//    public void WriteLine<T>(string site, T value) => System.Console.WriteLine(value);
//}






//// Generated by Fuzzlyn v1.5 on 2022-12-09 19:53:27
//// Run on X64 Windows
//// Seed: 1159427426597641634
//// Reduced from 117.5 KiB to 2.0 KiB in 00:01:38
//// Debug: Outputs 0
//// Release: Outputs 140728898420736
//public interface I1
//{
//}

//public struct S0
//{
//    public sbyte F0;
//    public uint F2;
//    public byte F3;
//    public bool F4;
//    public byte F7;
//    public short F8;
//    public bool F9;
//    public S0(sbyte f0, ushort f1, uint f2, byte f3, bool f4, ushort f6, byte f7, short f8) : this()
//    {
//    }

//    public uint M20(uint arg0, ushort arg1, ref int[] arg2, bool arg3, long arg4, byte arg5, bool arg6, short arg7, byte[] arg8)
//    {
//        Program.s_rt.WriteLine(arg4);
//        return 0;
//    }
//}

//public class Program
//{
//    public static IRuntime s_rt;
//    public static S0[] s_1 = new S0[] { new S0(0, 0, 0, 0, true, 0, 0, 0) };
//    public static I1 s_3;
//    public static short s_8;
//    public static long s_13;
//    public static S0 s_20;
//    public static int[] s_22;
//    public static S0 s_31;
//    public static S0 s_35;
//    public static void Main()
//    {
//        s_rt = new Runtime();
//        sbyte vr19 = s_35.F0;
//        byte vr22 = s_31.F3;
//        S0 vr23 = new S0(0, 0, 0, 0, true, 0, 0, 0);
//        sbyte vr25 = vr19;
//        var vr26 = vr23.F2;
//        var vr27 = vr23.F2;
//        short vr44 = s_8;
//        I1 vr45 = s_3;
//        byte vr47 = s_1[0].F3;
//        S0 vr41 = default(S0);
//        M16(vr26, vr23.M20(vr27, (ushort)new S0(vr25++, 5499, vr23.F2, 133, vr23.F4, 1463, vr23.F3, s_20.F8).M20(0, vr47, ref s_22, true, -7955738794714476533L, vr23.F7, !vr23.F4, M16(vr23.F2, vr23.F2, (short)vr41.M20(vr23.F2, vr22, ref s_22, vr23.F9, M16(0, 0, vr23.F8, ref s_3, vr23.F9), 0, vr23.F9, 1, new byte[] { 0 }), ref s_3, true), new byte[] { 0 }), ref s_22, s_20.F9, s_13, vr23.F3, vr23.F9, vr23.F8, new byte[] { 0 }), vr23.F8, ref s_3, true);
//    }

//    public static ref byte M16(uint arg0, uint arg1, short arg2, ref I1 arg3, bool arg4)
//    {
//        return ref s_1[0].F3;
//    }
//}

//public interface IRuntime
//{
//    void WriteLine<T>(T value);
//}

//public class Runtime : IRuntime
//{
//    public void WriteLine<T>(T value) => System.Console.WriteLine(value);
//}













//// Generated by Fuzzlyn v1.5 on 2022-12-09 20:12:43
//// Run on X64 Windows
//// Seed: 5922232528469345492
//// Reduced from 533.0 KiB to 3.3 KiB in 00:07:36
//// Debug: Outputs 2
//// Release: Outputs 1
//public interface I0
//{
//}

//public struct S0 : I0
//{
//    public uint F0;
//    public byte F1;
//    public bool F2;
//    public byte F3;
//    public S0(uint f0, byte f1, bool f2, byte f3) : this()
//    {
//        F0 = f0;
//    }

//    public void M70()
//    {
//        var vr0 = Program.s_48;
//        var vr1 = this.F0;
//        var vr2 = new ushort[,] { { 1 } };
//        var vr3 = Program.s_11;
//        var vr5 = this.F1;
//        var vr4 = Program.M82(vr5);
//        new S0(0, 0, true, 0).M74(Program.M75(vr3, this.F1, Program.M72(new S0(57328567U, 237, true, 28).M74(new sbyte[] { -3 }, Program.s_15[0, 0], this.F2, ref Program.s_11, this, this.F0, new ushort[,] { { 65535 } }, Program.M71(ref this, ref Program.s_31), ref this.F0)), this.F2), this.M74(Program.M75(new C0(new S0(0, 94, false, 255), 255, false, 0, new S0(0, 110, false, 254), 1, -20695, 280083093, 63707, true), Program.s_16[0][0].F1, (sbyte)(111615821U ^ (sbyte)~Program.s_31), Program.s_50[0].F2), Program.s_15[0, 0], this.F2, ref Program.s_2[0], Program.s_15[0, 0].F4, (uint)Program.M72(new C0(new S0(672853793U, 245, false, 171), 0, true, 32766, new S0(0, 53, true, 95), 172, -22894, 1459821173, 40855, false)), Program.M78(), (int)(this.F0 << (ushort)(Program.s_18 / (byte)(Program.s_25.F3 | 1))), ref this.F0), false, ref Program.s_8, vr0, vr1, vr2, vr4, ref Program.s_45);
//    }

//    public C0 M74(sbyte[] arg0, C0 arg1, bool arg2, ref C0 arg3, I0 arg4, uint arg5, ushort[,] arg6, int arg7, ref uint arg8)
//    {
//        Program.s_rt.WriteLine(arg7);
//        return new C0(new S0(0, 0, true, 0), 0, false, 0, new S0(0, 0, true, 0), 0, 1, 0, 0, true);
//    }
//}

//public class C0
//{
//    public byte F1;
//    public S0 F4;
//    public C0(S0 f0, byte f1, bool f2, short f3, S0 f4, byte f5, short f6, int f7, ushort f8, bool f9)
//    {
//    }
//}

//public class Program
//{
//    public static IRuntime s_rt;
//    public static C0[] s_2 = new C0[] { new C0(new S0(0, 1, false, 0), 0, false, 0, new S0(0, 0, true, 1), 0, 0, 0, 0, false) };
//    public static C0 s_8;
//    public static C0 s_11;
//    public static C0[,] s_15 = new C0[,] { { new C0(new S0(0, 0, true, 0), 0, false, 0, new S0(0, 0, true, 1), 0, 0, 0, 0, false) } };
//    public static C0[][] s_16 = new C0[][] { new C0[] { new C0(new S0(0, 0, true, 0), 0, true, 0, new S0(0, 0, true, 1), 0, 1, 0, 0, false) } };
//    public static long s_18 = 1;
//    public static S0 s_25;
//    public static sbyte s_31;
//    public static sbyte s_34;
//    public static uint s_45;
//    public static S0 s_48;
//    public static S0[] s_50 = new S0[] { new S0(0, 0, true, 0) };
//    public static void Main()
//    {
//        s_rt = new Runtime();
//        new S0(1, 0, false, 0).M70();
//    }

//    public static byte M71(ref S0 arg0, ref sbyte arg1)
//    {
//        return default(byte);
//    }

//    public static ushort[,] M78()
//    {
//        return default(ushort[,]);
//    }

//    public static int M82(byte arg0)
//    {
//        return default(int);
//    }

//    public static ref sbyte M72(C0 argThis)
//    {
//        return ref s_34;
//    }

//    public static sbyte[] M75(C0 argThis, byte arg0, sbyte arg1, bool arg2)
//    {
//        return new sbyte[] { 0 };
//    }
//}

//public interface IRuntime
//{
//    void WriteLine<T>(T value);
//}

//public class Runtime : IRuntime
//{
//    public void WriteLine<T>(T value) => System.Console.WriteLine(value);
//}


// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System;
using System.Runtime.CompilerServices;

namespace CodeGenTests
{
    static class IntRemainder
    {
        static int _fieldValue = 123;
        static uint _fieldValueUnsigned = 123;

        [MethodImpl(MethodImplOptions.NoInlining)]
        static int Int32_RemainderByOne()
        {
            // X64-FULL-LINE:      call CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
            // X64-FULL-LINE-NEXT: xor [[REG0:[a-z]+]], [[REG0]]

            // ARM64-FULL-LINE:      bl CORINFO_HELP_GETSHARED_NONGCSTATIC_BASE
            // ARM64-FULL-LINE-NEXT: mov [[REG0:[a-z0-9]+]], wzr

            return _fieldValue % 1;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        static int Int32_RemainderByOneWithValue(int value)
        {
            // X64-FULL-LINE: xor [[REG0:[a-z]+]], [[REG0]]

            // ARM64-FULL-LINE: mov [[REG0:[a-z0-9]+]], wzr

            return value % 1;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        static byte Byte_RemainderByMaxValuePlusOne(uint value)
        {
            // X64-NOT: and {{[a-z]+}}

            // X64: movzx {{[a-z]+}}, {{[a-z]+}}

            return (byte)(value % (Byte.MaxValue + 1));
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        static ushort UInt16_RemainderByMaxValuePlusOne(uint value)
        {
            // X64-NOT: and {{[a-z]+}}

            // X64: movzx {{[a-z]+}}, {{[a-z]+}}

            return (ushort)(value % (UInt16.MaxValue + 1));
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        static uint Byte_RemainderByMaxValuePlusOne_Return_UInt32(uint value)
        {
            // X64-NOT: and {{[a-z]+}}

            // X64: movzx {{[a-z]+}}, {{[a-z]+}}

            return (value % (Byte.MaxValue + 1));
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        static uint UInt16_RemainderByMaxValuePlusOne_Return_UInt32(uint value)
        {
            // X64-NOT: and {{[a-z]+}}

            // X64: movzx {{[a-z]+}}, {{[a-z]+}}

            return (value % (UInt16.MaxValue + 1));
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        static byte Byte_RemainderByMaxValuePlusOne_WithField()
        {
            // X64-NOT: and {{[a-z]+}}

            // X64: movzx {{[a-z]+}}, {{[a-z]+}}

            return (byte)(_fieldValueUnsigned % (Byte.MaxValue + 1));
        }

        static int Main()
        {
            if (Int32_RemainderByOne() != 0)
                return 0;

            if (Int32_RemainderByOneWithValue(-123) != 0)
                return 0;

            if (Byte_RemainderByMaxValuePlusOne(68000) != 160)
                return 0;

            if (UInt16_RemainderByMaxValuePlusOne(68000) != 2464)
                return 0;

            if (Byte_RemainderByMaxValuePlusOne_Return_UInt32(68000) != 160)
                return 0;

            if (UInt16_RemainderByMaxValuePlusOne_Return_UInt32(68000) != 2464)
                return 0;

            if (Byte_RemainderByMaxValuePlusOne_WithField() != 123)
                return 0;

            return 100;
        }
    }
}